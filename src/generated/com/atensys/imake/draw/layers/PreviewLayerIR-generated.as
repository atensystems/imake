
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	com.atensys.imake.draw.layers
 *	Class: 		PreviewLayerIR
 *	Source: 	D:\Work\imake.md\imake\src\com\atensys\imake\draw\layers\PreviewLayerIR.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.11.28 10:20:15 EET
 */

package com.atensys.imake.draw.layers
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.Canvas;
import mx.controls.CheckBox;
import mx.controls.listClasses.IDropInListItemRenderer;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.styles.*;



//	begin class def

public class PreviewLayerIR
	extends mx.containers.Canvas
	implements mx.controls.listClasses.IDropInListItemRenderer
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var checkBox : mx.controls.CheckBox;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.CheckBox
        ,
        id: "checkBox"
        ,
        events: {
          change: "__checkBox_change"
        }
        ,
        stylesFactory: function():void {
          this.horizontalCenter = "0";
          this.verticalCenter = "0";
        }
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function PreviewLayerIR()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties

		//	events

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}

	//	scripts
	//	<Script>, line 6 - 63

			import com.atensys.imake.draw.component.ComponentResizeContainer;
			import com.atensys.imake.draw.component.DComponent;
			
			import mx.collections.ArrayCollection;
			import mx.containers.ControlBar;
			import mx.controls.DataGrid;
			import mx.controls.List;
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.controls.listClasses.BaseListData;
			import mx.core.Application;
			import mx.core.UIComponent;
		
		private var _listData:BaseListData;        
        
        //Define getter for the listData property
        public function get listData() : BaseListData
        {
           return _listData;
        }

        //Define setter for the listData property
        public function set listData( value:BaseListData ) : void
        {
           _listData = value;
        }
        
        // Override the setter for data to figure out what column this itemRenderer is 
        // representing.
        public var _data:Object; 
        override public function set data(value:Object):void 
        {      
        	this._data = value;
        	if(checkBox!=null){
		       checkBox.selected = _data.visible as Boolean;
        	}        
        }
        
         override public function get data():Object{
         	return checkBox != null?_data:null;
         }
         
         private function forceUpdate(evt:Event) : void
		{
		    // Access the collection - listData.owner is the List and from there you have its dataProvider.
		    var ac:ArrayCollection = (listData.owner as DataGrid).dataProvider as ArrayCollection;
		    
		    // update the quantity field from the numeric stepper. This is what the List will automatically
		    // do when editing completes, but since you want to see the grand total change as the NumericStepper
		    // changes, you have to force things a bit.
		    _data.visible = checkBox.selected;
		    var comp:UIComponent = data.component.getController() as UIComponent;
		    comp.visible = checkBox.selected;
		    // finally, tell the collection the data changed. this will cause the collection to
		    // dispatch its own change event which is then picked up by the main application.
		    ac.itemUpdated(data);
		}
		 

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function __checkBox_change(event:flash.events.Event):void
{
	forceUpdate(event)
}





	//	embed carrier vars
	//	end embed carrier vars


//	end class def
}

//	end package def
}
