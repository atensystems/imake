
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	com.atensys.imake.draw.colors
 *	Class: 		advancedColorPicker
 *	Source: 	D:\Work\imake.md\imake\src\com\atensys\imake\draw\colors\advancedColorPicker.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.11.28 10:20:15 EET
 */

package com.atensys.imake.draw.colors
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Box;
import mx.containers.Canvas;
import mx.containers.TitleWindow;
import mx.controls.Button;
import mx.controls.Image;
import mx.controls.Label;
import mx.controls.RadioButton;
import mx.controls.TextInput;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.styles.*;



//	begin class def

public class advancedColorPicker
	extends mx.containers.TitleWindow
	implements mx.binding.IBindingClient
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var btncancel : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var btnok : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var csBlue : mx.controls.RadioButton;

	[Bindable]
/**
 * @private
 **/
	public var csGreen : mx.controls.RadioButton;

	[Bindable]
/**
 * @private
 **/
	public var csHue : mx.controls.RadioButton;

	[Bindable]
/**
 * @private
 **/
	public var csLightness : mx.controls.RadioButton;

	[Bindable]
/**
 * @private
 **/
	public var csRed : mx.controls.RadioButton;

	[Bindable]
/**
 * @private
 **/
	public var csSaturation : mx.controls.RadioButton;

	[Bindable]
/**
 * @private
 **/
	public var cvsCurr : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var cvsPrev : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var maincp : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var subcp : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var t_blue : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var t_green : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var t_hex : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var t_hue : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var t_lightness : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var t_red : mx.controls.TextInput;

	[Bindable]
/**
 * @private
 **/
	public var t_saturation : mx.controls.TextInput;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.TitleWindow
  ,
  propertiesFactory: function():Object { return {
    width: 450,
    height: 360,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Box
        ,
        stylesFactory: function():void {
          this.backgroundColor = 16777215;
          this.backgroundAlpha = 0.95;
          this.color = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Canvas
        ,
        stylesFactory: function():void {
          this.borderStyle = "inset";
        }
        ,
        propertiesFactory: function():Object { return {
          x: 10,
          y: 10,
          width: 259,
          height: 255,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Image
              ,
              id: "maincp"
              ,
              stylesFactory: function():void {
                this.top = "0";
                this.bottom = "0";
                this.left = "0";
                this.right = "0";
              }
            })
          ]
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Canvas
        ,
        stylesFactory: function():void {
          this.borderStyle = "inset";
        }
        ,
        propertiesFactory: function():Object { return {
          x: 277,
          y: 10,
          width: 29,
          height: 255,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Image
              ,
              id: "subcp"
              ,
              stylesFactory: function():void {
                this.left = "0";
                this.top = "0";
                this.bottom = "0";
                this.right = "0";
              }
            })
          ]
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Canvas
        ,
        stylesFactory: function():void {
          this.borderStyle = "solid";
          this.cornerRadius = 0;
          this.borderColor = 0;
          this.borderThickness = 1;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 335,
          y: 24,
          width: 62,
          height: 67,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Canvas
              ,
              id: "cvsCurr"
              ,
              stylesFactory: function():void {
                this.borderStyle = "solid";
                this.cornerRadius = 0;
                this.borderColor = 0;
                this.borderThickness = 1;
                this.left = "1";
                this.right = "1";
                this.top = "1";
              }
              ,
              propertiesFactory: function():Object { return {
                height: 32
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Canvas
              ,
              id: "cvsPrev"
              ,
              events: {
                click: "__cvsPrev_click"
              }
              ,
              stylesFactory: function():void {
                this.borderStyle = "solid";
                this.cornerRadius = 0;
                this.borderColor = 0;
                this.borderThickness = 1;
                this.left = "1";
                this.right = "1";
                this.top = "32";
                this.bottom = "1";
              }
            })
          ]
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        stylesFactory: function():void {
          this.textAlign = "center";
        }
        ,
        propertiesFactory: function():Object { return {
          x: 335,
          y: 8,
          text: "new",
          width: 62
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        stylesFactory: function():void {
          this.textAlign = "center";
        }
        ,
        propertiesFactory: function():Object { return {
          x: 335,
          y: 89,
          text: "current",
          width: 62
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.RadioButton
        ,
        id: "csHue"
        ,
        events: {
          click: "__csHue_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 325,
          y: 117,
          width: 36,
          selected: true,
          groupName: "colorspace",
          tabIndex: 1,
          label: "H:"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        propertiesFactory: function():Object { return {
          x: 399,
          y: 117,
          text: "Â°"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        propertiesFactory: function():Object { return {
          x: 399,
          y: 143,
          text: "%"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        propertiesFactory: function():Object { return {
          x: 399,
          y: 169,
          text: "%"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_hue"
        ,
        events: {
          change: "__t_hue_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 363,
          y: 115,
          width: 34,
          maxChars: 3,
          tabIndex: 7
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.RadioButton
        ,
        id: "csSaturation"
        ,
        events: {
          click: "__csSaturation_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 325,
          y: 143,
          width: 36,
          groupName: "colorspace",
          tabIndex: 2,
          label: "S:"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_saturation"
        ,
        events: {
          change: "__t_saturation_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 363,
          y: 141,
          width: 34,
          maxChars: 3,
          tabIndex: 8
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.RadioButton
        ,
        id: "csLightness"
        ,
        events: {
          click: "__csLightness_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 325,
          y: 169,
          width: 36,
          groupName: "colorspace",
          tabIndex: 3,
          label: "B:"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_lightness"
        ,
        events: {
          change: "__t_lightness_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 363,
          y: 167,
          width: 34,
          maxChars: 3,
          tabIndex: 9
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Label
        ,
        propertiesFactory: function():Object { return {
          x: 10,
          y: 288,
          text: "#:"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_hex"
        ,
        events: {
          change: "__t_hex_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 29,
          y: 286,
          width: 54,
          tabIndex: 13
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.RadioButton
        ,
        id: "csRed"
        ,
        events: {
          click: "__csRed_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 325,
          y: 200,
          width: 36,
          groupName: "colorspace",
          tabIndex: 4,
          label: "R"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_red"
        ,
        events: {
          change: "__t_red_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 363,
          y: 198,
          width: 34,
          maxChars: 3,
          tabIndex: 10
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.RadioButton
        ,
        id: "csGreen"
        ,
        events: {
          click: "__csGreen_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 325,
          y: 226,
          width: 36,
          groupName: "colorspace",
          tabIndex: 5,
          label: "G:"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_green"
        ,
        events: {
          change: "__t_green_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 363,
          y: 224,
          width: 34,
          maxChars: 3,
          tabIndex: 11
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.RadioButton
        ,
        id: "csBlue"
        ,
        events: {
          click: "__csBlue_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
          this.horizontalGap = 0;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 325,
          y: 252,
          width: 36,
          groupName: "colorspace",
          tabIndex: 6,
          label: "B:"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TextInput
        ,
        id: "t_blue"
        ,
        events: {
          change: "__t_blue_change"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 363,
          y: 250,
          width: 34,
          maxChars: 3,
          tabIndex: 12
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Button
        ,
        id: "btnok"
        ,
        events: {
          click: "__btnok_click"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 339,
          y: 286,
          label: "OK",
          width: 80,
          tabIndex: 21
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Button
        ,
        id: "btncancel"
        ,
        events: {
          click: "__btncancel_click"
        }
        ,
        stylesFactory: function():void {
          this.fontWeight = "normal";
        }
        ,
        propertiesFactory: function():Object { return {
          x: 244,
          y: 286,
          label: "Cancel",
          width: 80,
          tabIndex: 22
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function advancedColorPicker()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.styleName = "colorPickerPanel";
		this.layout = "absolute";
		this.width = 450;
		this.height = 360;
		this.title = "Color Picker";
		this.showCloseButton = true;

		//	events
		this.addEventListener("creationComplete", ___advancedColorPicker_TitleWindow1_creationComplete);
		this.addEventListener("close", ___advancedColorPicker_TitleWindow1_close);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _advancedColorPicker_bindingsSetup();
		var watchers:Array = [];

		var target:advancedColorPicker = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_com_atensys_imake_draw_colors_advancedColorPickerWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 5 - 1147

			import mx.core.Application;
			import mx.managers.PopUpManager;
			import mx.managers.CursorManager;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.core.UIComponent;
			import mx.binding.utils.ChangeWatcher;
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import flash.utils.getTimer;
			import mx.graphics.GradientEntry;
			import mx.graphics.RadialGradient;
			
			private static const CS_HUE:String = "hue";
			private static const CS_SATURATION:String = "saturation";
			private static const CS_LIGHTNESS:String = "lightness";
			private static const CS_RED:String = "red";
			private static const CS_GREEN:String = "green";
			private static const CS_BLUE:String = "blue";
			
			private static var whatColorSpace:String = CS_HUE;
			
			public var colors:ColorsPallete;
			
			private static function rgb2int(r:Number, g:Number, b:Number):uint
			{
				return 	uint((Math.round(r*255))<<16) | 
						uint((Math.round(g*255))<<8) | 
						uint(Math.round(b*255));
			}
			
			private static function rgb2hsl(r:Number, g:Number, b:Number):Array
			{
				var H:Number;
	            var S:Number;
	            var B:Number;
	            
	            var cmax:Number = (r > g) ? r : g;
	            if (b > cmax) {
	                cmax = b;
	            }
	            var cmin:Number = (r < g) ? r : g;
	            if (b < cmin) {
	                cmin = b;
	            }
	            B = cmax;
	            if (cmax != 0) {
	                S = (cmax - cmin)/cmax;
	            } else {
	                S = 0;
	            }
	            if (S == 0) {
	                H = 0;
	            } else {
	                var redc:Number   = (cmax - r)/(cmax - cmin);
	                var greenc:Number = (cmax - g)/(cmax - cmin);
	                var bluec:Number  = (cmax - b)/(cmax - cmin);
	                if (r == cmax) {
	                    H = bluec - greenc;
	                } else if (g == cmax) {
	                    H = 2.0 + redc - bluec;
	                } else {
	                    H = 4.0 + greenc - redc;
	                }
	                H = H / 6.0;
	                if (H < 0) {
	                    H = H + 1.0;
	                }
	            }
	            return [ H, S, B ];
			}
			
			private static function hsl2rgb(H:Number, S:Number, B:Number):Array
			{   
	            var r:Number = 0;
	            var g:Number = 0;
	            var b:Number = 0;
	            
	            if (S == 0) {
	                r = B;
	                g = r;
	                b = r;
	            } else {
	                var h:Number = (H - Math.floor(H)) * 6.0;
	                var f:Number =  h - Math.floor(h);
	            
	                var p:Number = B * (1.0 - S);
	                var q:Number = B * (1.0 - S * f);
	                var t:Number = B * (1.0 - (S * (1.0 - f)));
	            
	                switch(Math.floor(h)) {
	                    case 0:
	                        r = B; g = t; b = p;
	                        break;
	                    case 1:
	                        r = q; g = B; b = p;
	                        break;
	                    case 2:
	                        r = p; g = B; b = t;
	                        break;
	                    case 3:
	                        r = p; g = q; b = B;
	                        break;
	                    case 4:
	                        r = t; g = p; b = B;
	                        break;
	                    case 5:
	                        r = B; g = p; b = q;
	                        break;
	                }
	            }
	            return [r,g,b];
			}
			
			private var updateColorSpace:Function = drawHueColorspace;
			private var updateColorSpace2:Function = drawHueColorspace2;

			private var colorArea:Sprite = new Sprite();
			private var blackArea:Sprite = new Sprite();
			private var whiteArea:Sprite = new Sprite();
			
			private var colorArea2:Sprite = new Sprite();
			
			private var pickerHandle:Sprite;
			private var pickerHandleLeft:UIComponent;
			private var pickerHandleRight:UIComponent;
			
			private var draggingPickerHandle:Boolean = false;
			private var draggingPickers2:Boolean = false;
			
			private var hue:Number = 0;
			private var saturation:Number = 1;
			private var lightness:Number = 1;
			
			private var red:Number = 1;
			private var green:Number = 0;
			private var blue:Number = 0;
			
			private var ored:Number = 1;
			private var ogreen:Number = 0;
			private var oblue:Number = 0;
			
			private function initPickerHandle():void
			{
				pickerHandle = new Sprite();
				pickerHandle.graphics.lineStyle(2,0x000000,1);
				pickerHandle.graphics.drawCircle(0,0,4.5);
				pickerHandle.graphics.endFill();
				pickerHandle.graphics.lineStyle(1,0xFFFFFF,1);
				pickerHandle.graphics.drawCircle(0,0,4);
				
				pickerHandle.graphics.lineStyle();
				pickerHandle.graphics.beginFill(0xFFFFFF, 0);
				pickerHandle.graphics.drawRect(-3, -3, 6, 6);
				pickerHandle.graphics.endFill();
				maincp.addChild(pickerHandle);
			}
			
			private function initPickerHandles():void
			{
				pickerHandleLeft = new UIComponent();
                
                pickerHandleLeft.graphics.beginFill(0x000000, .2 );
                pickerHandleLeft.graphics.moveTo(-1,-4);
                pickerHandleLeft.graphics.lineTo( 7, 2);
                pickerHandleLeft.graphics.lineTo(-1, 8);
                pickerHandleLeft.graphics.endFill();
                pickerHandleLeft.graphics.beginFill(0x000000, .2);
                pickerHandleLeft.graphics.moveTo(-1,-5);
                pickerHandleLeft.graphics.lineTo( 7, 1);
                pickerHandleLeft.graphics.lineTo(-1, 7);
                pickerHandleLeft.graphics.endFill();
                pickerHandleLeft.graphics.beginFill(0x000000);
                pickerHandleLeft.graphics.moveTo(-1,-6);
                pickerHandleLeft.graphics.lineTo( 7, 0);
                pickerHandleLeft.graphics.lineTo(-1, 6);
                pickerHandleLeft.graphics.endFill();
                pickerHandleLeft.graphics.beginFill(0xcccccc);
                pickerHandleLeft.graphics.moveTo( 0,-4);
                pickerHandleLeft.graphics.lineTo( 5, 0);
                pickerHandleLeft.graphics.lineTo( 0, 4);
                pickerHandleLeft.graphics.beginFill(0xffffff);
                pickerHandleLeft.graphics.moveTo( 0,-4);
                pickerHandleLeft.graphics.lineTo( 3, -2);
                pickerHandleLeft.graphics.lineTo( 0, 0);
                pickerHandleLeft.graphics.endFill();
                pickerHandleLeft.x = subcp.parent.x+3;
                pickerHandleLeft.y = subcp.parent.y + 2;
                this.addChild(pickerHandleLeft);

                pickerHandleRight = new UIComponent();
                pickerHandleRight.graphics.beginFill(0x000000, .2);
                pickerHandleRight.graphics.moveTo( 4,-4);
                pickerHandleRight.graphics.lineTo(-4, 2);
                pickerHandleRight.graphics.lineTo( 4, 8);
                pickerHandleRight.graphics.endFill();
                pickerHandleRight.graphics.beginFill(0x000000, .2);
                pickerHandleRight.graphics.moveTo( 4,-5);
                pickerHandleRight.graphics.lineTo(-4, 1);
                pickerHandleRight.graphics.lineTo( 4, 7);
                pickerHandleRight.graphics.endFill();
                pickerHandleRight.graphics.beginFill(0x000000);
                pickerHandleRight.graphics.moveTo( 4,-6);
                pickerHandleRight.graphics.lineTo(-4, 0);
                pickerHandleRight.graphics.lineTo( 4, 6);
                pickerHandleRight.graphics.endFill();
                pickerHandleRight.graphics.beginFill(0xcccccc);
                pickerHandleRight.graphics.moveTo( 3,-4);
                pickerHandleRight.graphics.lineTo(-2, 0);
                pickerHandleRight.graphics.lineTo( 3, 4);
                pickerHandleRight.graphics.beginFill(0xffffff);
                pickerHandleRight.graphics.moveTo( 3,-4);
                pickerHandleRight.graphics.lineTo(0, -2);
                pickerHandleRight.graphics.lineTo( 3, 0);
                pickerHandleRight.graphics.endFill();
                pickerHandleRight.x = subcp.parent.x+subcp.parent.width-6;
                pickerHandleRight.y = subcp.parent.y + 2;
                this.addChild(pickerHandleRight);
			}			
			
			private function bringToFront(child:Sprite):void
			{
				var parent:* = child.parent;
				parent.removeChild(child);
				parent.addChild(child);
			}
			
			private function c(num:String, min:Number, max:Number):Number
			{
				var theNum:Number = Number(num);
				
				if ( isNaN(theNum) )
					return NaN;
				
				return Math.min(Math.max(theNum, min), max);
			}
			
			/*
			Getter Functions
			
			You will notice in the getters I am checking if the textbox
			is currently focused, I do this because if I return the actual
			value it interferes with typing because I am clamping the value
			between 0 and 255.
			*/
			
			[Bindable("colorChanged")]
			private function get displayHue():*
			{
				if ( focusManager.getFocus() == t_hue )
				{
					return t_hue.text;
				}
				
				return Math.round( 360*hue );
			}
			
			[Bindable("colorChanged")]
			private function get displaySaturation():*
			{
				if ( focusManager.getFocus() == t_saturation )
				{
					return t_saturation.text;
				}
				
				return Math.round( 100*saturation );
			}
			
			[Bindable("colorChanged")]
			private function get displayLightness():*
			{
				if ( focusManager.getFocus() == t_saturation )
				{
					return t_lightness.text;
				}
				
				return Math.round( 100*lightness );
			}
			
			[Bindable("colorChanged")]
			private function get displayRed():*
			{
				if ( focusManager.getFocus() == t_red )
				{
					return t_red.text;
				}
				return Math.round( 255*red );
			}
			
			[Bindable("colorChanged")]
			private function get displayGreen():*
			{
				if ( focusManager.getFocus() == t_green )
				{
					return t_green.text;
				}
				return Math.round( 255*green );
			}
			
			[Bindable("colorChanged")]
			private function get displayBlue():*
			{
				if ( focusManager.getFocus() == t_blue )
				{
					return t_blue.text;
				}
				return Math.round( 255*blue );
			}
			
			[Bindable("colorChanged")]
			public function get hex():String
			{
				if ( focusManager.getFocus() == t_hex )
				{
					return t_hex.text;
				}
				else
				{
					var hex:String = toHex(displayRed) + toHex(displayGreen) + toHex(displayBlue);
	            	return hex;
   				}
            }
            
            [Bindable("prevColorChanged")]
			public function get prevhex():String
			{
				var hex:String = toHex(Math.round(255*ored)) + toHex(Math.round(255*ogreen)) + toHex(Math.round(255*oblue));
            	return hex;
            }
            
            [Bindable("colorChanged")]
            public function get currentColor():uint
            {
            	return rgb2int(red, green, blue);
            }
            
            [Bindable("colorChanged")]
            private function get previousColor():uint
            {
            	return rgb2int(ored, ogreen, oblue);
            }
            
            //just for reverse compatibility
            public function get lastColor():Number
            {
            	return rgb2int(ored, ogreen, oblue);
            }
            
            public function set lastColor(color:Number):void
            {
            	ored  = ((color>>16)&0xFF)/255;
                ogreen  = ((color>>8)&0xFF)/255;
                oblue  = ((color)&0xFF)/255;
                var hsl:Array = rgb2hsl(ored, ogreen, oblue);
                hue = hsl[0];
                saturation = hsl[1];
                lightness = hsl[2];
          
                dispatchEvent(new Event("colorChanged"));
            }
       		
			
			/*
			Setter Functions
			*/
			private function set displayHue(value:Number):void
			{
				if ( isNaN(value) )
					return;
					
				hue = value/360;
				var rgb:Array = hsl2rgb(hue, saturation, lightness);
				red = rgb[0];
				green = rgb[1];
				blue = rgb[2];
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function set displaySaturation(value:Number):void
			{
				if ( isNaN(value) )
					return;
					
				saturation = value/100;
				var rgb:Array = hsl2rgb(hue, saturation, lightness);
				red = rgb[0];
				green = rgb[1];
				blue = rgb[2];
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function set displayLightness(value:Number):void
			{
				if ( isNaN(value) )
					return;
					
				lightness = value/100;
				var rgb:Array = hsl2rgb(hue, saturation, lightness);
				red = rgb[0];
				green = rgb[1];
				blue = rgb[2];
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function set displayRed(value:Number):void
			{
				if ( isNaN(value) )
					return;
					
				red = value/255;
				var hsl:Array = rgb2hsl(red, green, blue);
				hue = hsl[0];
				saturation = hsl[1];
				lightness = hsl[2];
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function set displayGreen(value:Number):void
			{
				if ( isNaN(value) )
					return;
					
				green = value/255;
				var hsl:Array = rgb2hsl(red, green, blue);
				hue = hsl[0];
				saturation = hsl[1];
				lightness = hsl[2];
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function set displayBlue(value:Number):void
			{
				if ( isNaN(value) )
					return;
					
				blue = value/255;
				var hsl:Array = rgb2hsl(red, green, blue);
				hue = hsl[0];
				saturation = hsl[1];
				lightness = hsl[2];
				dispatchEvent(new Event("colorChanged"));
			}
			
			public function set hex(value:String):void
			{
				fromHex(value);
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function fromHex(value:String):void
       		{
       			if ( value.indexOf("#") == 0 )
       				value = value.substr(1);
       				
       			while ( value.length < 6 )
       				value = "0"+value;
       				
       			if ( value.length > 6 )
       				value = value.substr(0,6);
       				
       			red = parseInt( value.substr(0,2), 16 ) / 255;
       			green = parseInt( value.substr(2,2), 16 ) / 255;
       			blue = parseInt( value.substr(4,2), 16 ) / 255;
       			
                var hsb:Array = rgb2hsl(red, green, blue);
                hue = hsb[0];
                saturation = hsb[1];
                lightness = hsb[2];
       		}
       		
       		private function handleHexChange():void
       		{
       			hex = t_hex.text;
       		}
			
			private function toHex(value:Number):String
       		{
       			if ( isNaN(value) )
       				return "00";
       				
       			value = Math.round(Math.max(Math.min(value, 255), 0));
       			
       			var mask:String = "0123456789ABCDEF";
       			
       			var pos1:Number = (value-(value%16))/16;
       			var pos2:Number = value%16;
       			
       			return mask.charAt(pos1) + mask.charAt(pos2);
       		}
       		
       		private function updatePickerLocation():void
			{
				switch ( whatColorSpace )
				{
					case CS_HUE:
						pickerHandleLeft.y = subcp.parent.y+(subcp.height*hue) + 2;
						pickerHandleRight.y = subcp.parent.y+(subcp.height*hue) + 2;
						pickerHandle.x = Math.round(maincp.width*saturation);
						pickerHandle.y = Math.round(maincp.height - (maincp.height*lightness));
						break;
						
					case CS_SATURATION:
						pickerHandleLeft.y = subcp.parent.y+(subcp.height-(subcp.height*saturation)) + 2;
						pickerHandleRight.y = subcp.parent.y+(subcp.height-(subcp.height*saturation)) + 2;
						pickerHandle.x = Math.round(maincp.width*hue);
						pickerHandle.y = Math.round(maincp.height - (maincp.height*lightness));
						break;
						
					case CS_LIGHTNESS:
						pickerHandleLeft.y = subcp.parent.y+(subcp.height-(subcp.height*lightness)) + 2;
						pickerHandleRight.y = subcp.parent.y+(subcp.height-(subcp.height*lightness)) + 2;
						pickerHandle.x = Math.round(maincp.width*hue);
						pickerHandle.y = Math.round(maincp.height - (maincp.height*saturation));
						break;
						
					case CS_RED:
						pickerHandleLeft.y = subcp.parent.y+(subcp.height-(subcp.height*red)) + 2;
						pickerHandleRight.y = subcp.parent.y+(subcp.height-(subcp.height*red)) + 2;
						pickerHandle.x = Math.round(maincp.width*blue);
						pickerHandle.y = Math.round(maincp.height - (maincp.height*green));
						break;
						
					case CS_GREEN:
						pickerHandleLeft.y = subcp.parent.y+(subcp.height-(subcp.height*green)) + 2;
						pickerHandleRight.y = subcp.parent.y+(subcp.height-(subcp.height*green)) + 2;
						pickerHandle.x = Math.round(maincp.width*blue);
						pickerHandle.y = Math.round(maincp.height - (maincp.height*red));
						break;
						
					case CS_BLUE:
						pickerHandleLeft.y = subcp.parent.y+(subcp.height-(subcp.height*blue)) + 2;
						pickerHandleRight.y = subcp.parent.y+(subcp.height-(subcp.height*blue)) + 2;
						pickerHandle.x = Math.round(maincp.width*red);
						pickerHandle.y = Math.round(maincp.height - (maincp.height*green));
						break;
				}
			}       		
			
			private function changeColorSpace(what:String):void
			{
				whatColorSpace = what;
				
				switch ( what )
				{
					case CS_HUE:
						updateColorSpace = drawHueColorspace;
						updateColorSpace2 = drawHueColorspace2;
						break;
						
					case CS_SATURATION:
						updateColorSpace = drawSaturationColorspace;
						updateColorSpace2 = drawSaturationColorspace2;
						break;
						
					case CS_LIGHTNESS:
						updateColorSpace = drawLightnessColorspace;
						updateColorSpace2 = drawLightnessColorspace2;
						break;
						
					case CS_RED:
						updateColorSpace = drawRedColorspace;
						updateColorSpace2 = drawRedColorspace2;
						break;
						
					case CS_GREEN:
						updateColorSpace = drawGreenColorspace;
						updateColorSpace2 = drawGreenColorspace2;
						break;
						
					case CS_BLUE:
						updateColorSpace = drawBlueColorspace;
						updateColorSpace2 = drawBlueColorspace2;
						break;
				}
				
				updatePickerLocation();
				updateColorSpace();
				updateColorSpace2();	
				bringToFront(pickerHandle);
			}
			
			private function drawHueColorspace():void
			{		
				if ( !maincp.contains(whiteArea) )
				{
					if ( maincp.contains(blackArea) )
						maincp.removeChild(blackArea);
						
					maincp.addChild(whiteArea);
				}
					
				if ( !maincp.contains(blackArea) )
					maincp.addChild(blackArea);
					
				var w:Number = maincp.width;
				var h:Number = maincp.height;
				
				var rgb:Array = hsl2rgb(hue, 1, 1);
				colorArea.graphics.clear();
				colorArea.graphics.beginFill(rgb2int(rgb[0], rgb[1], rgb[2]));
				colorArea.graphics.drawRect(0, 0, w, h);
				
                var matrix:Matrix = new Matrix();
                matrix.createGradientBox(w, h, 0, 0, 0);
                whiteArea.graphics.clear();
                whiteArea.graphics.beginGradientFill(GradientType.LINEAR, [0xFFFFFF, 0x000000], [1, 1], [0, 255], matrix);
                whiteArea.graphics.drawRect(0, 0, w, h);
                whiteArea.blendMode = "screen";

                matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
                blackArea.graphics.clear();
                blackArea.graphics.beginGradientFill(GradientType.LINEAR, [0xFFFFFF, 0x000000], [1, 1], [0, 255], matrix);
                blackArea.graphics.drawRect(0, 0, w, h);
                blackArea.blendMode = "multiply";
			}
			
			private function drawHueColorspace2():void
			{
				var w:Number = subcp.width;
				var h:Number = subcp.height;
				
				colorArea2.graphics.clear();
				for ( var y:int=0; y<h; y++ )
				{
					var drawHue:Number = (y/h);
					var rgb:Array = hsl2rgb(drawHue, 1, 1);
					var color:uint = rgb2int(rgb[0], rgb[1], rgb[2]);
					colorArea2.graphics.beginFill(color);
					colorArea2.graphics.drawRect(0, y, w, 1);
				}
			}
			
			private function drawSaturationColorspace():void
			{
				if ( maincp.contains(whiteArea) )
					maincp.removeChild(whiteArea);
					
				if ( !maincp.contains(blackArea) )
					maincp.addChild(blackArea);
					
				var w:Number = maincp.width;
				var h:Number = maincp.height;
				
				colorArea.graphics.clear();
				for ( var i:int=0; i<w; i++ )
				{
					var drawHue:Number = (1/255)*i;
					var rgb:Array = hsl2rgb(drawHue, saturation, 1);
					colorArea.graphics.beginFill(rgb2int(rgb[0], rgb[1], rgb[2]));
					colorArea.graphics.drawRect(i, 0, 1, h);
				}

				var matrix:Matrix = new Matrix();
                matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
                blackArea.graphics.clear();
                blackArea.graphics.beginGradientFill(GradientType.LINEAR, [0xFFFFFF, 0x000000], [1, 1], [0, 255], matrix);
                blackArea.graphics.drawRect(0, 0, w, h);
                blackArea.blendMode = "multiply";
			}
			
			private function drawSaturationColorspace2():void
			{
				var w:Number = subcp.width;
				var h:Number = subcp.height;
				
				var rgb:Array = hsl2rgb(hue, 1, lightness);
				var color1:uint = rgb2int(rgb[0], rgb[1], rgb[2]);
				
				rgb = hsl2rgb(hue, 0, lightness);
				var color2:uint = rgb2int(rgb[0], rgb[1], rgb[2]);
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea2.graphics.clear();
				colorArea2.graphics.beginGradientFill(GradientType.LINEAR, [color1, color2], [1, 1], [0, 255], matrix);
				colorArea2.graphics.drawRect(0, 0, w, h);
			}
			
			private function drawLightnessColorspace():void
			{
				if ( maincp.contains(blackArea) )
					maincp.removeChild(blackArea);
					
				if ( maincp.contains(whiteArea) )
					maincp.removeChild(whiteArea);
				
				var w:Number = maincp.width;
				var h:Number = maincp.height;
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea.graphics.clear();
				for ( var i:int=0; i<w; i++ )
				{
					var drawHue:Number = (1/255)*i;
					var rgb:Array = hsl2rgb(drawHue, 1, lightness);
					var color1:uint = rgb2int(rgb[0], rgb[1], rgb[2]);
					rgb = hsl2rgb(0, 0, lightness);
					var color2:uint = rgb2int(rgb[0], rgb[1], rgb[2]);
					
					colorArea.graphics.beginGradientFill(GradientType.LINEAR, [color1, color2], [1, 1], [0, 255], matrix);
					colorArea.graphics.drawRect(i, 0, 1, h);
				}
			}
			
			private function drawLightnessColorspace2():void
			{
				var w:Number = subcp.width;
				var h:Number = subcp.height;
				
				var rgb:Array = hsl2rgb(hue, saturation, 1);
				var color:uint = rgb2int(rgb[0], rgb[1], rgb[2]);
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea2.graphics.clear();
				colorArea2.graphics.beginGradientFill(GradientType.LINEAR, [color, 0x000000], [1, 1], [0, 255], matrix);
				colorArea2.graphics.drawRect(0, 0, w, h);
			}
			
			private function drawRedColorspace():void
			{
				if ( maincp.contains(whiteArea) )
					maincp.removeChild(whiteArea);
					
				if ( maincp.contains(blackArea) )
					maincp.removeChild(blackArea);
				
				var w:Number = maincp.width;
				var h:Number = maincp.height;
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea.graphics.clear();
				for ( var x:int=0; x<w; x++ )
				{
					var endColor:uint = rgb2int(red, 0, x/w);
					var startColor:uint = rgb2int(red, 1, x/w);
					colorArea.graphics.beginGradientFill(GradientType.LINEAR, [startColor, endColor], [1, 1], [0, 255], matrix);
					colorArea.graphics.drawRect(x, 0, 1, h);
				}
			}
			
			private function drawRedColorspace2():void
			{
				var w:Number = subcp.width;
				var h:Number = subcp.height;
				
				var color1:uint = rgb2int(1, green, blue);
				var color2:uint = rgb2int(0, green, blue);
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea2.graphics.clear();
				colorArea2.graphics.beginGradientFill(GradientType.LINEAR, [color1, color2], [1, 1], [0, 255], matrix);
				colorArea2.graphics.drawRect(0, 0, w, h);
			}
			
			private function drawGreenColorspace():void
			{
				if ( maincp.contains(whiteArea) )
					maincp.removeChild(whiteArea);
					
				if ( maincp.contains(blackArea) )
					maincp.removeChild(blackArea);
				
				var w:Number = maincp.width;
				var h:Number = maincp.height;
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea.graphics.clear();
				for ( var x:int=0; x<w; x++ )
				{
					var endColor:uint = rgb2int(0, green, x/w);
					var startColor:uint = rgb2int(1, green, x/w);
					colorArea.graphics.beginGradientFill(GradientType.LINEAR, [startColor, endColor], [1, 1], [0, 255], matrix);
					colorArea.graphics.drawRect(x, 0, 1, h);
				}
			}
			
			private function drawGreenColorspace2():void
			{
				var w:Number = subcp.width;
				var h:Number = subcp.height;
				
				var color1:uint = rgb2int(red, 1, blue);
				var color2:uint = rgb2int(red, 0, blue);
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea2.graphics.clear();
				colorArea2.graphics.beginGradientFill(GradientType.LINEAR, [color1, color2], [1, 1], [0, 255], matrix);
				colorArea2.graphics.drawRect(0, 0, w, h);
			}
			
			private function drawBlueColorspace():void
			{
				if ( maincp.contains(whiteArea) )
					maincp.removeChild(whiteArea);
					
				if ( maincp.contains(blackArea) )
					maincp.removeChild(blackArea);
				
				var w:Number = maincp.width;
				var h:Number = maincp.height;
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea.graphics.clear();
				for ( var x:int=0; x<w; x++ )
				{
					var endColor:uint = rgb2int(x/w, 0, blue);
					var startColor:uint = rgb2int(x/w, 1, blue);
					colorArea.graphics.beginGradientFill(GradientType.LINEAR, [startColor, endColor], [1, 1], [0, 255], matrix);
					colorArea.graphics.drawRect(x, 0, 1, h);
				}
			}
			
			private function drawBlueColorspace2():void
			{
				var w:Number = subcp.width;
				var h:Number = subcp.height;
				
				var color1:uint = rgb2int(red, green, 1);
				var color2:uint = rgb2int(red, green, 0);
				
				var matrix:Matrix = new Matrix();
				matrix.createGradientBox(w, h, Math.PI/2, 0, 0);
				
				colorArea2.graphics.clear();
				colorArea2.graphics.beginGradientFill(GradientType.LINEAR, [color1, color2], [1, 1], [0, 255], matrix);
				colorArea2.graphics.drawRect(0, 0, w, h);
			}

			private function onCreationComplete():void
			{
				this.x = 250;
				this.y = 140;
				
				initPickerHandle();
				initPickerHandles();
				
				maincp.addEventListener(MouseEvent.MOUSE_OVER, addPickerCursor);
				maincp.addEventListener(MouseEvent.MOUSE_OUT, removePickerCursor);
				
				maincp.addEventListener(MouseEvent.MOUSE_DOWN, startPickerDrag);
				this.addEventListener(MouseEvent.MOUSE_UP, stopPickerDrag);
				this.addEventListener(MouseEvent.MOUSE_MOVE, findColor);
				maincp.addEventListener(MouseEvent.CLICK, findColor);
				
				subcp.addEventListener(MouseEvent.MOUSE_DOWN, startPickers2Drag);
				this.addEventListener(MouseEvent.MOUSE_UP, stopPickers2Drag);
				this.addEventListener(MouseEvent.MOUSE_MOVE, findColor2);
				subcp.addEventListener(MouseEvent.CLICK, findColor2);
				
				maincp.addChild(colorArea);
				subcp.addChild(colorArea2);
				
				changeColorSpace(whatColorSpace);
				addEventListener("colorChanged", onColorChange);
				
				bringToFront(pickerHandle);
				
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function onColorChange(e:Event):void
			{
				updatePickerLocation();
				updateColorSpace();
				updateColorSpace2();
				bringToFront(pickerHandle);
			}
			
			private function restorePreviousColor():void
			{
				red = ored;
				green = ogreen;
				blue = oblue;
				
				var hsl:Array = rgb2hsl(red, green, blue);
				hue = hsl[0];
				saturation = hsl[1];
				lightness = hsl[2];
				
				dispatchEvent(new Event("colorChanged"));
			}
			
			private function addPickerCursor(e:MouseEvent):void
			{
				CursorManager.setCursor(PickerCursor, 2);
			}
			
			private function removePickerCursor(e:MouseEvent):void
			{
				if ( !draggingPickerHandle )
					CursorManager.removeAllCursors();
			}
			
			private function startPickerDrag(e:MouseEvent):void
			{
				//change the docus so all the values update correctly...
				focusManager.setFocus(btnok);
				draggingPickerHandle = true;
			}
			
			private function startPickers2Drag(e:MouseEvent):void
			{
				//change the docus so all the values update correctly...
				focusManager.setFocus(btnok);
				draggingPickers2 = true;
			}
			
			private function findColor(e:MouseEvent):void
			{	
				if ( draggingPickerHandle || e.type == MouseEvent.CLICK )
				{
					//find the color...
					var x:Number = Math.min(Math.max(maincp.mouseX, 0), maincp.width);
					var y:Number = Math.min(Math.max(maincp.mouseY, 0), maincp.height);
					
					var rgb:Array;
					var hsl:Array;
					
					switch ( whatColorSpace )
					{
						case CS_HUE:
						{
							//lightness: vert
							//saturation: horz
							saturation = x/maincp.width;
							lightness = (maincp.height-y)/maincp.height;
							rgb = hsl2rgb(hue, saturation, lightness);
							red = rgb[0];
							green = rgb[1];
							blue = rgb[2];
							break;
						}
						
						case CS_SATURATION:
						{
							//hue: horx
							//lightness: vert
							hue = x/maincp.width;
							lightness = (maincp.height-y)/maincp.height;
							rgb = hsl2rgb(hue, saturation, lightness);
							red = rgb[0];
							green = rgb[1];
							blue = rgb[2];
							break;
						}
						
						case CS_LIGHTNESS:
						{
							hue = x/maincp.width;
							saturation = (maincp.height-y)/maincp.height;
							rgb = hsl2rgb(hue, saturation, lightness);
							red = rgb[0];
							green = rgb[1];
							blue = rgb[2];
							break;
						}
						
						case CS_RED:
						{
							//blue: x, green: y
							blue = x/maincp.width;
							green = (maincp.height-y)/maincp.height;
							hsl = rgb2hsl(red, green, blue);
							hue = hsl[0];
							saturation = hsl[1];
							lightness = hsl[2];
							break;
						}
						
						case CS_GREEN:
						{
							//blue: x, red: y
							blue = x/maincp.width;
							red = (maincp.height-y)/maincp.height;
							hsl = rgb2hsl(red, green, blue);
							hue = hsl[0];
							saturation = hsl[1];
							lightness = hsl[2];
							break;
						}
						
						case CS_BLUE:
						{
							//blue: x, red: y
							red = x/maincp.width;
							green = (maincp.height-y)/maincp.height;
							hsl = rgb2hsl(red, green, blue);
							hue = hsl[0];
							saturation = hsl[1];
							lightness = hsl[2];
							break;
						}
					}
					
					dispatchEvent(new Event("colorChanged"));
					
					pickerHandle.x = Math.min(Math.max(maincp.mouseX, 0), maincp.width);
					pickerHandle.y = Math.min(Math.max(maincp.mouseY, 0), maincp.height);
				}
			}
			
			private function findColor2(e:MouseEvent):void
			{	
				if ( draggingPickers2 || e.type == MouseEvent.CLICK )
				{
					//find the color...
					var y:Number = Math.min(Math.max(subcp.mouseY, 0), subcp.height);
					
					var rgb:Array;
					var hsl:Array;
					
					switch ( whatColorSpace )
					{
						case CS_HUE:
						{
							hue = y/subcp.height;
							rgb = hsl2rgb(hue, saturation, lightness);
							red = rgb[0];
							green = rgb[1];
							blue = rgb[2];
							break;
						}
						
						case CS_SATURATION:
						{
							saturation = (subcp.height-y)/subcp.height;
							rgb = hsl2rgb(hue, saturation, lightness);
							red = rgb[0];
							green = rgb[1];
							blue = rgb[2];
							break;
						}
						
						case CS_LIGHTNESS:
						{
							lightness = (subcp.height-y)/subcp.height;
							rgb = hsl2rgb(hue, saturation, lightness);
							red = rgb[0];
							green = rgb[1];
							blue = rgb[2];
							break;
						}
						
						case CS_RED:
						{
							red = (subcp.height-y)/subcp.height;
							hsl = rgb2hsl(red, green, blue);
							hue = hsl[0];
							saturation = hsl[1];
							lightness = hsl[2];
							break;
						}
						
						case CS_GREEN:
						{
							green = (subcp.height-y)/subcp.height;
							hsl = rgb2hsl(red, green, blue);
							hue = hsl[0];
							saturation = hsl[1];
							lightness = hsl[2];
							break;
						}
						
						case CS_BLUE:
						{
							blue = (subcp.height-y)/subcp.height;
							hsl = rgb2hsl(red, green, blue);
							hue = hsl[0];
							saturation = hsl[1];
							lightness = hsl[2];
							break;
						}
					}
					
					dispatchEvent(new Event("colorChanged"));
				}
			}
			
			private function stopPickerDrag(e:MouseEvent):void
			{
				draggingPickerHandle = false;
				
				if ( maincp.mouseX < 0 || maincp.mouseX > maincp.width )
					removePickerCursor(null);
					
				if ( maincp.mouseY < 0 || maincp.mouseY > maincp.height )
					removePickerCursor(null);
			}
			
			private function stopPickers2Drag(e:MouseEvent):void
			{
				draggingPickers2 = false;
			}
			
			public function getColorRGB():uint
			{
				return rgb2int(red, green, blue);
			}
			
			public function setColorRGB(color:uint):void 
			{
                ored = red = ((color>>16)&0xFF)/255;
                ogreen = green = ((color>>8)&0xFF)/255;
                oblue = blue = ((color)&0xFF)/255;
                var hsl:Array = rgb2hsl(red, green, blue);
                hue = hsl[0];
                saturation = hsl[1];
                lightness = hsl[2];
          
                dispatchEvent(new Event("colorChanged"));
        	}
        	
        	private function cancelMe():void
        	{
        		setColorRGB(rgb2int(ored, ogreen, oblue));
        		this.lastColor=previousColor;
        		PopUpManager.removePopUp(this);
        	}
        	
        	private function closeMe():void
        	{
        		this.lastColor=currentColor;
        		PopUpManager.removePopUp(this);
        	}
		

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___advancedColorPicker_TitleWindow1_creationComplete(event:mx.events.FlexEvent):void
{
	onCreationComplete()
}

/**
 * @private
 **/
public function ___advancedColorPicker_TitleWindow1_close(event:mx.events.CloseEvent):void
{
	closeMe();
}

/**
 * @private
 **/
public function __cvsPrev_click(event:flash.events.MouseEvent):void
{
	restorePreviousColor();
}

/**
 * @private
 **/
public function __csHue_click(event:flash.events.MouseEvent):void
{
	changeColorSpace(CS_HUE);
}

/**
 * @private
 **/
public function __t_hue_change(event:flash.events.Event):void
{
	displayHue=c(t_hue.text, 0, 360);
}

/**
 * @private
 **/
public function __csSaturation_click(event:flash.events.MouseEvent):void
{
	changeColorSpace(CS_SATURATION);
}

/**
 * @private
 **/
public function __t_saturation_change(event:flash.events.Event):void
{
	displaySaturation=c(t_saturation.text, 0, 100);
}

/**
 * @private
 **/
public function __csLightness_click(event:flash.events.MouseEvent):void
{
	changeColorSpace(CS_HUE);changeColorSpace(CS_LIGHTNESS);
}

/**
 * @private
 **/
public function __t_lightness_change(event:flash.events.Event):void
{
	displayLightness=c(t_lightness.text, 0, 100);
}

/**
 * @private
 **/
public function __t_hex_change(event:flash.events.Event):void
{
	handleHexChange();
}

/**
 * @private
 **/
public function __csRed_click(event:flash.events.MouseEvent):void
{
	changeColorSpace(CS_RED);
}

/**
 * @private
 **/
public function __t_red_change(event:flash.events.Event):void
{
	displayRed=c(t_red.text, 0, 255);
}

/**
 * @private
 **/
public function __csGreen_click(event:flash.events.MouseEvent):void
{
	changeColorSpace(CS_GREEN);
}

/**
 * @private
 **/
public function __t_green_change(event:flash.events.Event):void
{
	displayGreen=c(t_green.text, 0, 255);
}

/**
 * @private
 **/
public function __csBlue_click(event:flash.events.MouseEvent):void
{
	changeColorSpace(CS_BLUE);
}

/**
 * @private
 **/
public function __t_blue_change(event:flash.events.Event):void
{
	displayBlue=c(t_blue.text, 0, 255);
}

/**
 * @private
 **/
public function __btnok_click(event:flash.events.MouseEvent):void
{
	closeMe()
}

/**
 * @private
 **/
public function __btncancel_click(event:flash.events.MouseEvent):void
{
	cancelMe();
}


	//	binding mgmt
    private function _advancedColorPicker_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():uint
            {
                return (currentColor);
            },
            function(_sourceFunctionReturnValue:uint):void
            {
                cvsCurr.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "cvsCurr.backgroundColor");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():uint
            {
                return (previousColor);
            },
            function(_sourceFunctionReturnValue:uint):void
            {
                cvsPrev.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "cvsPrev.backgroundColor");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (displayHue);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_hue.text = _sourceFunctionReturnValue;
            },
            "t_hue.text");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (displaySaturation);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_saturation.text = _sourceFunctionReturnValue;
            },
            "t_saturation.text");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (displayLightness);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_lightness.text = _sourceFunctionReturnValue;
            },
            "t_lightness.text");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (hex);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_hex.text = _sourceFunctionReturnValue;
            },
            "t_hex.text");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (displayRed);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_red.text = _sourceFunctionReturnValue;
            },
            "t_red.text");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (displayGreen);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_green.text = _sourceFunctionReturnValue;
            },
            "t_green.text");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (displayBlue);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                t_blue.text = _sourceFunctionReturnValue;
            },
            "t_blue.text");
        result[8] = binding;

        return result;
    }

    private function _advancedColorPicker_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (currentColor);
		[Binding(id='1')]
		destination = (previousColor);
		[Binding(id='2')]
		destination = (displayHue);
		[Binding(id='3')]
		destination = (displaySaturation);
		[Binding(id='4')]
		destination = (displayLightness);
		[Binding(id='5')]
		destination = (hex);
		[Binding(id='6')]
		destination = (displayRed);
		[Binding(id='7')]
		destination = (displayGreen);
		[Binding(id='8')]
		destination = (displayBlue);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (advancedColorPicker)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
